plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
?par
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2
)
data(mtcars)
play()
dim(mtcars)
summary(mtcars)
names(mtcars)
head(mtcars,10)
nxt()
?boxplot
boxplot(mpg~cyl, data=mtcars)
hist(mtcars$mpg)
getwd()
ls()
list.file()
list.files()
load("5.R.RData")
R1<-lm(y~X1+X2)
R1<-lm(y~X1+X2, data="5.R.RData")
R1<-lm(y~X1+X2, data=5.R.RData)
ls()
y
list.files()
data_test <- read.csv("5.R.RData")
data_test
ls()
class(Xy)
summary(Xy)
?glm
fit1<-glm(y~X1+X2, data=Xy)
fit1
summary(fit1)
matplot(Xy,type="l")
matplot(Xy,type="l")
?matplot
summary(Xy)
randomXy <- matrix(runif(3000,-1,2), 1000,3)
matplot(randomXy[,1:2],type="l")
matplot(Xy,type="l")
source('~/beta1_fn.R')
beta1_fn(Xy,1:1000)
?boot
library(boot)
?boot
boot.out1 <- boot(Xy, beta1_fn, R=1000)
boot.out1
(0.02900604-0.027)/0.027
boot.out1 <- boot(Xy, beta1_fn, R=1000)
boot.out1
new.rows=c(101:200, 401:500, 101:200, 901:1000, 301:400, 1:100, 1:100, 801:900, 201:300, 701:800)
new.Xy = xY[new.rows,]
new.Xy = Xy[new.rows,]
dim(Xy)
dim(new.Xy)
head(new.Xy)
?tsboot
tboot.out <- tsboot(Xy, beta1_fn, R=1000, sim="fixed", l=100)
tboot.out
source('~/.active-rstudio-document')
tboot.out <- tsboot(Xy, beta1_fn, R=1000, sim="parametric", ran.gen=data.lm)
tboot.out <- tsboot(Xy, beta1_fn, R=1000, sim="fixed", l=100)
tboot.out
tboot.out <- tsboot(Xy, beta1_fn, R=1000, sim="fixed", l=100)
tboot.out
for(i=1:30){i}
for(i in 1:30){i}
sum=0
for(i in 1:30){sum+i}
sum
for(i in 1:30){sum=sum+i}
sum
30^2
1+((30*(31))/2)
library(glmnet)
install.packages(glmnet)
install.packages("glmnet")
library(glmnet)
?cv.glmnet
getwd()
ls()
ls()
load("7.R.RData")
ls()
clear()
rm(list=ls())
ls()
load("7.R.RData")
ls()
fit1<-lm(y~x)
fit1
summary(fit1)
fit1<-lm(y~x)
summary(fit1)
fit2 <- lm(y~x+l(x^2))
fit2 <- lm(y~x+1(x^2))
fit2 <- lm(y~x+I(x^2))
fit2
summary(fit2)
fit2 <- lm(y~x+I(x^2))
summary(fit2)
library(tree)
library("tree")
require(tree)
getwd()
ls()
clear()
clearall()
rm(list=ls())
ls()
load(10.R.RData)
load("10.R.RData")
ls()
dim(x)
class(x)
names(x)
ls()
dimnames(x)
ls()
r1 <- rbind(x,x.test)
class(r1)
dim(r1)
r1pca <- prcomp(r1,scale=TRUE)
r1pca
summary(r1pca)
ls()
head(r1pca)
r1pca
summary(r1pca)
ls()
xrt <- as.matrix(x) %*% as.matrix(r1pca$rotation[,1:5])
y.new <- data.frame(y,xrt)
lmfit <- lm(y~.,data=y.new)
testing <- as.matrix(x.test) %*% as.matrix(r1pca$rotation[,1:5])
testing2 <- data.frame(y.test,testing)
outputs <- predict(lmfit, newdata=testing2)
mean((outputs-y.test)^2)
library(pls)
library(p1s)
train <- data.frame(x,y)
pcr_fit <- pcr(y~., data=train,scale=TRUE)
pcr_fit <- prcomp(y~., data=train,scale=TRUE)
yx <- rbind(x,y)
class(yx)
lmfit_train <- lm(y~.,data=yx)
dim(yx)
yx <- data.frame(x,y)
dim(yx)
lmfit_train <- lm(y~.,data=yx)
test <- data.frame(x.test,y.test)
diff <- predict(lmfit_train, newdata=test)
mean((diff-y.test)^2)
library(MASS)
library(e1071)
install("e1071")
install.packages("e1071")
library(e1071)
I10 <- diag(10)
mean1 <- rep(0,10)
mean2 <- c(rep(1,5),rep(0,5))
mean1
mean2
train_test <- function(n,kernel){}
train_test <- function(n,kernel){
train1 <- cbind(rep(0,50),mvrnorm(n=50,mu=mean1,Sigma=I10))
train2 <- cbind(rep(1,50),mvrnorm(n=50,mu=mean2,Sigma=I10))
train<- as.data.frame(rbind(train1,train2))
names(train)<-c("label","x1","x2","x3","x4","x5","x6","x7","x8","x9","x10")
train$label = as.factor(train$label)
svm.fit <-svm(label~., data=train,kernel=kernel,shrinking=TRUE)
test1 <- cbind(0,mvrnorm(n=n, mu=mean1, Sigma=I10))
test2<-cbind(1,mvrnorm(n=n, mu=mean2,Sigma=I10))
test <- as.data.frame(rbind(test1,test2))
names(test)<-c("label", "x1","x2","x3","x4","x5","x6","x7","x8","x9","x10")
test$label=as.factor(test$label)
pred.svm <- predict(svm.fit, test[,-1])
table(test[,1], pred.svm)
1-sum(test[,1]==pred.svm)/2000
}
set.seed(1)
N<-1000
test_mse = rep(0,N)
for (i in 1:N){
test_mse[i] <- train_test (1000,"radial")
}
mean(test_mse)
set.seed(1)
N
test_mse=rep(0,N)
for (i in 1:N){
test_mse[i] <- train_test(1000,"linear")
}
mean(test_mse)
train_test2 <- function(n){
train1<-cbind(rep(0,50),mvrnorm(n=50,mu=mean1,Sigma=I10))
train2<-cbind(rep(1,50),mvrnorm(n=50,mu=mean2,Sigma=I10))
train<-as.data.frame(rbind(train1,train2))
names(train)<-c("label","x1","x2","x3","x4","x5","x6","x7","x8","x9","x10")
train$label=as.factor(train$label)
lmfit <- glm(label~.,data=train,family=binomial)
test1=cbind(0,mvrnorm(n=n,mu=mean1,Sigma=I10))
test2=cbind(0,mvrnorm(n=n,mu=mean2,Sigma=I10))
test<-as.data.frame(rbind(test1,test2))
names(test)<-c("label","x1","x2","x3","x4","x5","x6","x7","x8","x9","x10")
test$label <- as.factor(test$label)
pred.lmfit <- predict(lmfit, test[,-1])
table(test[,1],pred.lmfit)
1-sum(test[,1] == pred.lmfit)/2000
}
set.seed(1)
N<-1000
test_mse = rep(0,N)
for(i in 1:N){}
for(i in 1:N){
test_mse[i] <- train_test2(1000)
}
mean(test_mse)
?prcomp
library(iris)
library("iris")
load("iris")
getwd()
?library
load(iris)
load(mtcars)
load('mtcars')
summary(mtcars)
?iris
dimnames(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
medical.example <- data.frame(patient = 1:100, age=rnorm(100,mean=60,sd=12), treatment = gl(2,50,labels=c("treatment", "control")))
medical.example
gl(2,5,labels=c('a','c'))
gl(2,5)
player=sample(letters,25)
player
tapply(iris$Sepal.Width, iris$Species, max)
tapply(iris$Sepal.Length, iris$Species, max)
tapply(iris$Sepal.Length, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, sd)
data = as.data.frame(seq(as.Date("1990-01-01"), as.Date("2013-12-31"), by="day)"))
data = as.data.frame(seq(as.Date("1990-01-01"), as.Date("2013-12-31"), by="day"))
names(data)="date"
summary(data)
head(data)
data$month = substring(data$date, 6,7)
head(data)
data$year = substring(data$date,1,4)
data$snow_lying = round(rnorm(dim(data)[1], mean=0.5, sd=0.1))
head(data)
tapply(data$snow_lying,data$month,sum)
tapply(data$snow_lying,list(data$month,data$year),sum)
tapply(data$snow_lying,c(data$month,data$year),sum)
list(1,2)
c(1,2)
Orange
tapply(Orange$circumference,Orange$Tree,max)
tapply(Orange$circumference,Orange$Tree,max, simplify=TRUE)
tapply(Orange$circumference,Orange$Tree,max, simplify=FALSE)
?Orange
?datasets
library(help="datasets")
summary(LakeHuron)
head(LakeHuron)
names(LakeHuron)
dim(LakeHuron)
dim(Orange)
class(LakeHuron)
?ts
length(LakeHuron)
1972-1875
plot(LakeHuron)
for(x in 1:5){print(x)}
I=rep(0,100)
I
I[8]
source('~/.active-rstudio-document')
I
plot(I)
source('~/.active-rstudio-document')
plot(I)
source('~/.active-rstudio-document')
plot(I)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
plot(I)
source('~/.active-rstudio-document')
plot(I)
source('~/pset7problem3.R')
y <- 4
getwd()
ls()
SPE470 <- read.csv('SPE470')
SPE470 <- read.csv('SPE470.csv')
class(SPE470)
summary(SPE470)
head(SPE470)
plot(SPE470[,2], SPE470[,3])
SPE470 <- read.csv('SPE470.csv')
plot(SPE470[,2], SPE470[,3])
R1 <- tapply(SPE470[,2],SPE470[,1],mean)
R1
class(R1)
R1_test <- as.list(R1)
R1_test
squares <- list(1,2)
squares
R1
R1_test
R1_test <- as.vector(R1)
R1_test
squares <- c(1250, 500, 2475, 833.333, 2000,625, 487.5,4968.75)
R1sheet <- R1_test/squares
R1sheet
10000*32/160
R2 <- as.list(tapply(SPE470[,3],SPE470[,1],mean))
R2
R2sheet <- R2/squares
R2 <- as.vector(R2)
R2sheet <- R2/squares
R2
R2 <- tapply(SPE470[,3],SPE470[,1],mean)
R2
class(R2)
R2_test <- as.list(R2)
R2_test
R2_test <- as.vector(R2_test)
R2_test
dim(R2_test)
dim(R1_test)
R1_test
R1
R1_test2 <- as.vector(R1)
R1_test2
R2_test2 <- as.vector(R2)
R2_test2
R2sheet <- R2_test2/squares
R2sheet
R1sheet
difference <- (R2sheet-R1sheet)/R1sheet
difference
plot(c(50,50,50,39,397.5,594,640,500), c(1.1,1.12,1.66,0.77,1.87,1.24,2.27,1.25))
plot(c(833.3,625,500, 487.5, 4968.75,2475,2000,1250), c(1.1,1.12,1.66,0.77,1.87,1.24,2.27,1.25))
plot(c(833.3,625,500, 487.5, 4968.75,2475,2000,1250), c(1.1,1.12,1.66,0.77,1.87,1.24,2.27,1.25), xlab='squares',ylab='percent change')
library(swirl)
rm(list=ls())
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package,country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r_version=="3.1.1", country=="US")
?Comparison
filter(cran, r_version<="3.0.2", country=="IN")
filter(cran, country=="IN"|country=="IN")
filter(cran, country=="US"|country=="IN")
filter(cran,size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
?dplyr
?select
?arrange
iris2 <- select(iris, 1:4)
iris2
iris2 <- select(iris, Sepal.Length, Petal.Length)
head(iris2)
arrange(iris2, desc(Petal.Length))
iris3 <- arrange(iris2, desc(Petal.Length))
plot(iris3$Sepal.Length)
?mutate
iris4 <- mutate(iris3, Petal.Inches = Petal.Length*2.2)
head(iris4)
iris5 <- transmute(iris4, Petal.Inch <- Petal.Inches/(2.2*2.2))
head(iris5)
?summary
summary(iris5, mean(Petal.Inches))
summary(iris5)
summary(iris5, mean)
ls()
file.exists("iris5")
?dir.remove
?download.file
head(iris,10)
head(iris, nrows=10)
head(iris, nrow=10)
?head
head(iris, n=10L)
head(iris, n=10)
setwd("~/Coursera/repdata_1/RepData_PeerAssessment1")
ls()
rm(list=ls())
ls
ls()
test <- read.csv("activity.csv")
test <- read.csv("activity.zip")
head(test)
test <- unz("activity.zip")
test <- unz(temp,"activity.zip")
temp <- tempfile()
test <- read.csv(unz(temp, "activity.zip"))
?unz
unz("activity.zip","activity.csv")
exists("activity.csv")
test <- read.csv(unz("activity.zip","activity.csv"))
head(test)
tail(test)
tail(n=100)
tail(test,n=100)
head(test, n=100)
class(test$date)
steps <- (test$steps, test$date, sum)
steps <- tapply(test$steps, test$date, sum)
steps <- tapply(test$steps, test$date, sum)
steps
steps <- tapply(test$steps, test$date, sum, na.rm)
steps <- tapply(test$steps, test$date, sum, na.rm+TRUE)
steps <- tapply(test$steps, test$date, sum, na.rm=TRUE)
steps
mean(steps_per_day)
mean(steps)
median(steps)
?hist
class(steps)
class(steps[2])
steps1 <- as.vector(steps)
steps1
hist(steps)
hist(steps, xlab="test")
hist(steps, main="test")
?split
test2 <- split(test, test$date)
len(test2)
length(test2)
head(test2)
class(test2)
test3 <- as.data.frame(test2)
head(test3)
class(test2[1])
head(test2[1])
daily <- list()
class(daily)
daily
daily <- list(max)
daily
daily <- list(2)
daily
daily <- list(rep(0,61))
?sapply
p <- aggregate(. ~ interval, data=test, mean)
head(p)
p <- aggregate(steps ~ interval, data=test, mean)
head(p)
max(test$steps)
max(test$steps, rm.na=TRUE)
max(p$steps)
z <- apply(p, max)
?apply
z <- apply(p, 2,max)
z
z <- apply(p, 2,which.max)
z
?which.max
which.max(z[2])
which.max(z[2], na.rm=TRUE)
which.max(z, na.rm=TRUE)
which.max(z)
z
which.max(p)
which.max(p[2])
z
p
class(p[2])
class(p[,2])
which.max(p[,2])
104*5
288*5
p[104,1]
